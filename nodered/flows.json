[
    {
        "id": "39c8988d7579f7fd",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f508a8bc63d51d65",
        "type": "subflow",
        "name": "Latch sets Signal",
        "info": "",
        "category": "BrickWeb",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "input_brick_id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "input_id",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 8
                    }
                }
            },
            {
                "name": "input_state",
                "type": "num",
                "value": "2",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 2,
                        "max": 5
                    }
                }
            },
            {
                "name": "signal_brick_id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "signal_id",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 8
                    }
                }
            },
            {
                "name": "signal_state",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0,
                        "max": 1
                    }
                }
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "928b6cd8afe78e19",
        "type": "subflow",
        "name": "BrickServer Admin API",
        "info": "This SubFlow is just for sending a (json)payload to BrickServer's Admin Interface and receiving it's response.\n\nReason for this SubFlow is to have a single place where the BrickServer connection parameters needs to be configured.\n\n# Input:\n\nPayload to send to BrickServer\n\n# Outputs:\n\n**1**: untouched input payload\n\n**2**: Response payload\n\n# Additional Info:\n\nIt's possible to change the URL of the 'http request' node with new BrickServer connection information. This is going to be persisted even with rerunning the NodeRed Preconfiguration.\n\nEverything else in this Subflow is overwritten by NodeRed Preconfiguration!",
        "category": "BrickWeb",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "59b74ca18ab4c3db"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 740,
                "y": 100,
                "wires": [
                    {
                        "id": "5e400d82346df396",
                        "port": 0
                    }
                ]
            },
            {
                "x": 740,
                "y": 160,
                "wires": [
                    {
                        "id": "d9cf924b99f9a8ed",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "author": "Nils Ostrowski",
            "desc": "SubFlow for sending a (json)payload to BrickServer's Admin Interface"
        },
        "color": "#DDAA99",
        "inputLabels": [
            "payload"
        ],
        "outputLabels": [
            "input payload",
            "response"
        ]
    },
    {
        "id": "70aad4cc197c0fa0",
        "type": "subflow",
        "name": "Trafficlight",
        "info": "temp or humid sensor value sets signals of SignalBrick whether it is to high, to low or perfekt (just like a traffic light)\n\n# Variables\n\n**input_type**: whether the input sensor is a _temp sensor_ or a _humid sensor_\n\n**input_brick_id**: _id_ of brick housing the _temp_ or _humid_ sensor\n\n**input_sensor_id**: _id_ of _temp_ or _humid_ sensor\n\n**watermark_high**: sensor values above (not equal) this watermark are considered to high\n\n**watermark_low**: sensor values below (not equal) this watermark are considered to low\n\n**signal_brick_id**: _id_ of brick housing the output signals\n\n**signal_to_high**: _id_ of signal that is triggered when sensor value is considered as to high\n\n**signal_ok**: _id_ of signal that is triggered when sensor value is not considered to high nor to low\n\n**signal_to_low**: _id_ of signal that is triggered when sensor value is considered as to low",
        "category": "BrickWeb",
        "in": [],
        "out": [],
        "env": [
            {
                "name": "input_type",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "temp sensor"
                                },
                                "v": "temp"
                            },
                            {
                                "l": {
                                    "en-US": "humidity sensor"
                                },
                                "v": "humid"
                            }
                        ]
                    }
                }
            },
            {
                "name": "input_brick_id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "input_sensor_id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "watermark_high",
                "type": "num",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "watermark_low",
                "type": "num",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "num"
                        ]
                    }
                }
            },
            {
                "name": "signal_brick_id",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "signal_to_high",
                "type": "num",
                "value": "0",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0
                    }
                }
            },
            {
                "name": "signal_ok",
                "type": "num",
                "value": "1",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0
                    }
                }
            },
            {
                "name": "signal_to_low",
                "type": "num",
                "value": "2",
                "ui": {
                    "type": "spinner",
                    "opts": {
                        "min": 0
                    }
                }
            }
        ],
        "meta": {
            "author": "Nils Ostrowski",
            "desc": "temp or humid sensor value sets signals of SignalBrick whether it is to high, to low or perfekt (just like a traffic light)"
        },
        "color": "#DDAA99"
    },
    {
        "id": "6c8bc1031ca33a4f",
        "type": "mqtt-broker",
        "name": "BrickServer",
        "broker": "192.168.56.102",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "93500dc77341337f",
        "type": "mqtt in",
        "z": "f508a8bc63d51d65",
        "name": "",
        "topic": "brick/+/latch/+",
        "qos": "2",
        "datatype": "auto",
        "broker": "6c8bc1031ca33a4f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "a35c0ae67237cd4f"
            ]
        ]
    },
    {
        "id": "a35c0ae67237cd4f",
        "type": "function",
        "z": "f508a8bc63d51d65",
        "name": "Extract Vars",
        "func": "msg.brick_id = msg.topic.split(\"/\")[1];\nmsg.latch_id = msg.topic.split(\"/\")[3].split(\"_\")[1];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "fdce96596e0f377c"
            ]
        ]
    },
    {
        "id": "fdce96596e0f377c",
        "type": "switch",
        "z": "f508a8bc63d51d65",
        "name": "if brick_id == input_brick_id",
        "property": "brick_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_brick_id",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 700,
        "y": 220,
        "wires": [
            [
                "d9998b2afdb0cbfa"
            ]
        ]
    },
    {
        "id": "d9998b2afdb0cbfa",
        "type": "switch",
        "z": "f508a8bc63d51d65",
        "name": "if latch_id == input_id",
        "property": "latch_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_id",
                "vt": "env"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "4a63e06dc24fd137"
            ]
        ]
    },
    {
        "id": "4a63e06dc24fd137",
        "type": "switch",
        "z": "f508a8bc63d51d65",
        "name": "if payload == input_state",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_state",
                "vt": "env"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 1290,
        "y": 220,
        "wires": [
            [
                "95100125f55f517d"
            ]
        ]
    },
    {
        "id": "4e221ca2d908f65f",
        "type": "subflow:f508a8bc63d51d65",
        "z": "39c8988d7579f7fd",
        "name": "",
        "env": [
            {
                "name": "input_brick_id",
                "value": "localhost",
                "type": "str"
            },
            {
                "name": "signal_brick_id",
                "value": "local2",
                "type": "str"
            },
            {
                "name": "signal_id",
                "value": "3",
                "type": "num"
            },
            {
                "name": "signal_state",
                "value": "1",
                "type": "num"
            },
            {
                "name": "latch_brick_id",
                "value": "localhost",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 180,
        "wires": []
    },
    {
        "id": "a05fdb8f7e50cf76",
        "type": "function",
        "z": "f508a8bc63d51d65",
        "name": "prepare json",
        "func": "msg.payload = {\"command\":\"set\",\"key\":\"signal\",\"activate\":true};\nmsg.payload.signal = env.get(\"signal_brick_id\") + \"_\" + env.get(\"signal_id\");\nmsg.payload.value = env.get(\"signal_state\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 340,
        "wires": [
            [
                "b30d5ecfe35ec57a"
            ]
        ]
    },
    {
        "id": "2adf3aa91c3aea42",
        "type": "debug",
        "z": "f508a8bc63d51d65",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 340,
        "wires": []
    },
    {
        "id": "95100125f55f517d",
        "type": "link out",
        "z": "f508a8bc63d51d65",
        "name": "",
        "links": [
            "3b602f143d2b6b1a"
        ],
        "x": 1475,
        "y": 220,
        "wires": []
    },
    {
        "id": "3b602f143d2b6b1a",
        "type": "link in",
        "z": "f508a8bc63d51d65",
        "name": "",
        "links": [
            "95100125f55f517d"
        ],
        "x": 295,
        "y": 340,
        "wires": [
            [
                "a05fdb8f7e50cf76"
            ]
        ]
    },
    {
        "id": "80ae1dc59aca1268",
        "type": "http request",
        "z": "928b6cd8afe78e19",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://192.168.56.102:8081/admin",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 100,
        "wires": [
            [
                "5e400d82346df396",
                "d9cf924b99f9a8ed"
            ]
        ]
    },
    {
        "id": "8b474b2b1c7790e3",
        "type": "comment",
        "z": "928b6cd8afe78e19",
        "name": "SubFlow for sending a (json)payload to BrickServer's Admin Interface",
        "info": "This SubFlow is just for sending a (json)payload to BrickServer's Admin Interface and receiving it's response.\n\nReason for this SubFlow is to have a single place where the BrickServer connection parameters needs to be configured.\n\n# Input:\n\nPayload to send to BrickServer\n\n# Outputs:\n\n**1**: untouched input payload\n\n**2**: Response payload\n\n# Additional Info:\n\nIt's possible to change the URL of the 'http request' node with new BrickServer connection information. This is going to be persisted even with rerunning the NodeRed Preconfiguration.\n\nEverything else in this Subflow is overwritten by NodeRed Preconfiguration!",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "59b74ca18ab4c3db",
        "type": "change",
        "z": "928b6cd8afe78e19",
        "name": "save payload",
        "rules": [
            {
                "t": "set",
                "p": "payload_o",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "80ae1dc59aca1268"
            ]
        ]
    },
    {
        "id": "5e400d82346df396",
        "type": "change",
        "z": "928b6cd8afe78e19",
        "name": "restore payload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload_o",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "payload_o",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d9cf924b99f9a8ed",
        "type": "change",
        "z": "928b6cd8afe78e19",
        "name": "cleanup msg",
        "rules": [
            {
                "t": "delete",
                "p": "payload_o",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b30d5ecfe35ec57a",
        "type": "subflow:928b6cd8afe78e19",
        "z": "f508a8bc63d51d65",
        "name": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "2adf3aa91c3aea42"
            ],
            [
                "2adf3aa91c3aea42"
            ]
        ]
    },
    {
        "id": "f4474e3c756cc949",
        "type": "mqtt in",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "topic": "brick/+/+/+",
        "qos": "2",
        "datatype": "auto",
        "broker": "6c8bc1031ca33a4f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 80,
        "y": 100,
        "wires": [
            [
                "f658e7a1b1f65a8a"
            ]
        ]
    },
    {
        "id": "f658e7a1b1f65a8a",
        "type": "function",
        "z": "70aad4cc197c0fa0",
        "name": "Extract vars",
        "func": "msg.sensor_brick = msg.topic.split(\"/\")[1];\nmsg.sensor_type = msg.topic.split(\"/\")[2];\nmsg.sensor_id = msg.topic.split(\"/\")[3];\nmsg.sensor_value = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "3c41bf382d95f4ce"
            ]
        ]
    },
    {
        "id": "3c41bf382d95f4ce",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "if sensor_brick == input_brick_id",
        "property": "sensor_brick",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_brick_id",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 500,
        "y": 100,
        "wires": [
            [
                "2b1235e47c53ac34"
            ]
        ]
    },
    {
        "id": "2b1235e47c53ac34",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "if sensor_type == input_type",
        "property": "sensor_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_type",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 800,
        "y": 100,
        "wires": [
            [
                "95492132cb450b8a"
            ]
        ]
    },
    {
        "id": "95492132cb450b8a",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "if sensor_id == input_sensor_id",
        "property": "sensor_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "input_sensor_id",
                "vt": "env"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1090,
        "y": 100,
        "wires": [
            [
                "82c8e1e95730e7a9"
            ]
        ]
    },
    {
        "id": "82c8e1e95730e7a9",
        "type": "link out",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "2951f1bb3f7282e8"
        ],
        "x": 1275,
        "y": 100,
        "wires": []
    },
    {
        "id": "2951f1bb3f7282e8",
        "type": "link in",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "82c8e1e95730e7a9"
        ],
        "x": 75,
        "y": 200,
        "wires": [
            [
                "51a4b8417188b58f"
            ]
        ]
    },
    {
        "id": "51a4b8417188b58f",
        "type": "function",
        "z": "70aad4cc197c0fa0",
        "name": "prepare to high",
        "func": "msg.payload = {\"command\":\"set\",\"key\":\"signal\"};\nmsg.payload.signal = env.get(\"signal_brick_id\") + \"_\" + env.get(\"signal_to_high\");\nmsg.payload.value = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 200,
        "wires": [
            [
                "b1238ce1c0d3f057"
            ]
        ]
    },
    {
        "id": "b1238ce1c0d3f057",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "sensor value to high",
        "property": "sensor_value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "watermark_high",
                "vt": "env"
            },
            {
                "t": "lte",
                "v": "watermark_high",
                "vt": "env"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 440,
        "y": 200,
        "wires": [
            [
                "e855d7b9390e9ac4"
            ],
            [
                "e03b0b17ce565175"
            ]
        ]
    },
    {
        "id": "e855d7b9390e9ac4",
        "type": "change",
        "z": "70aad4cc197c0fa0",
        "name": "enable signal",
        "rules": [
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 160,
        "wires": [
            [
                "e03b0b17ce565175"
            ]
        ]
    },
    {
        "id": "e03b0b17ce565175",
        "type": "subflow:928b6cd8afe78e19",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "x": 900,
        "y": 200,
        "wires": [
            [
                "0b37e2ee1e32e4ce"
            ],
            []
        ]
    },
    {
        "id": "0b37e2ee1e32e4ce",
        "type": "link out",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "dac636ac4d9db7a0"
        ],
        "x": 1075,
        "y": 200,
        "wires": []
    },
    {
        "id": "dac636ac4d9db7a0",
        "type": "link in",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "0b37e2ee1e32e4ce"
        ],
        "x": 75,
        "y": 300,
        "wires": [
            [
                "4e000005a254ce1f"
            ]
        ]
    },
    {
        "id": "4e000005a254ce1f",
        "type": "function",
        "z": "70aad4cc197c0fa0",
        "name": "prepare to low",
        "func": "msg.payload.signal = env.get(\"signal_brick_id\") + \"_\" + env.get(\"signal_to_low\");\nmsg.payload.value = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "64f7ae15f6458ef3"
            ]
        ]
    },
    {
        "id": "64f7ae15f6458ef3",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "sensor value to low",
        "property": "sensor_value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "watermark_low",
                "vt": "env"
            },
            {
                "t": "gte",
                "v": "watermark_low",
                "vt": "env"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 300,
        "wires": [
            [
                "0690f6a534d6f5cd"
            ],
            [
                "950295310503ad63"
            ]
        ]
    },
    {
        "id": "0690f6a534d6f5cd",
        "type": "change",
        "z": "70aad4cc197c0fa0",
        "name": "enable signal",
        "rules": [
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "950295310503ad63"
            ]
        ]
    },
    {
        "id": "950295310503ad63",
        "type": "subflow:928b6cd8afe78e19",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "x": 900,
        "y": 300,
        "wires": [
            [
                "402716462860b45c"
            ],
            []
        ]
    },
    {
        "id": "4e312c8c270d57c3",
        "type": "link in",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "402716462860b45c"
        ],
        "x": 75,
        "y": 400,
        "wires": [
            [
                "bb15d4a4ad4bfecc"
            ]
        ]
    },
    {
        "id": "402716462860b45c",
        "type": "link out",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "links": [
            "4e312c8c270d57c3"
        ],
        "x": 1075,
        "y": 300,
        "wires": []
    },
    {
        "id": "bb15d4a4ad4bfecc",
        "type": "function",
        "z": "70aad4cc197c0fa0",
        "name": "prepare ok",
        "func": "msg.payload.activate = true\nmsg.payload.signal = env.get(\"signal_brick_id\") + \"_\" + env.get(\"signal_ok\");\nmsg.payload.value = 0;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 400,
        "wires": [
            [
                "9805e7d644228626"
            ]
        ]
    },
    {
        "id": "9805e7d644228626",
        "type": "switch",
        "z": "70aad4cc197c0fa0",
        "name": "sensor value is ok",
        "property": "sensor_value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "btwn",
                "v": "watermark_low",
                "vt": "env",
                "v2": "watermark_high",
                "v2t": "env"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 400,
        "wires": [
            [
                "b4ee187aca6f2639"
            ],
            [
                "c2a67cfecfa485a3"
            ]
        ]
    },
    {
        "id": "b4ee187aca6f2639",
        "type": "change",
        "z": "70aad4cc197c0fa0",
        "name": "enable signal",
        "rules": [
            {
                "t": "set",
                "p": "payload.value",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 360,
        "wires": [
            [
                "c2a67cfecfa485a3"
            ]
        ]
    },
    {
        "id": "c2a67cfecfa485a3",
        "type": "subflow:928b6cd8afe78e19",
        "z": "70aad4cc197c0fa0",
        "name": "",
        "x": 900,
        "y": 400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bc54aa231d4420d6",
        "type": "comment",
        "z": "70aad4cc197c0fa0",
        "name": "temp or humid sensor value sets signals of SignalBrick whether it is to high, to low or perfekt (just like a traffic light)",
        "info": "# Variables\n\n**input_type**: whether the input sensor is a _temp sensor_ or a _humid sensor_\n\n**input_brick_id**: _id_ of brick housing the _temp_ or _humid_ sensor\n\n**input_sensor_id**: _id_ of _temp_ or _humid_ sensor\n\n**watermark_high**: sensor values above (not equal) this watermark are considered to high\n\n**watermark_low**: sensor values below (not equal) this watermark are considered to low\n\n**signal_brick_id**: _id_ of brick housing the output signals\n\n**signal_to_high**: _id_ of signal that is triggered when sensor value is considered as to high\n\n**signal_ok**: _id_ of signal that is triggered when sensor value is not considered to high nor to low\n\n**signal_to_low**: _id_ of signal that is triggered when sensor value is considered as to low",
        "x": 410,
        "y": 40,
        "wires": []
    }
]
